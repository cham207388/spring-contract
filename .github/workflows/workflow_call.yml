name: CI

on:
  workflow_call:
    inputs:
      artifacts:
        type: string
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4

    - name: Ensure Gradle Wrapper is Executable
      run: chmod +x gradlew

    - name: Verify Gradle Version
      run: ./gradlew --version

    - name: Build producer
      run: |
        ./gradlew :producer:clean :producer:build --stacktrace
        
    - name: Upload stub artifact to GitHub Packages
      uses: actions/upload-artifact@v4
      with:
        name: producer-0.0.1-SNAPSHOT-stubs-jar
        path: producer/build/libs/producer-0.0.1-SNAPSHOT-stubs.jar
        retention-days: 1

    - name: Print all artifacts for troubleshooting
      run: |
        echo "Artifacts list:"
        echo '${{ inputs.artifacts }}' | jq -c '.[]' | while read artifact; do
          name=$(echo "$artifact" | jq -r '.name')
          path=$(echo "$artifact" | jq -r '.path')
          echo "Artifact name: $name"
          echo "Artifact path: $path"
          echo ""
        done
        
      # Download artifacts dynamically

    - name: Parse artifacts
      id: parse-artifacts
      run: |
        echo '${{ inputs.artifacts }}' > artifacts.json
        echo "Validating JSON input..."
        if ! jq empty artifacts.json; then
          echo "Invalid JSON format in artifacts input."
          exit 1
        fi
        echo "Artifacts input is valid."
        cat artifacts.json

    # Dynamically process each artifact
    - name: Download artifacts
      run: |
        echo "Downloading artifacts..."
        jq -c '.[]' artifacts.json | while read artifact; do
          name=$(echo "$artifact" | jq -r '.name')
          path=$(echo "$artifact" | jq -r '.path')

          echo "Downloading $name to $path..."
          mkdir -p "$path"
          curl -L -O "$name" -o "$path"
        done



    - name: Debug downloaded artifacts
      run: |
        echo "Verifying downloaded artifacts..."
        ls -la ~/.m2/repository/com/abc/contracts/ || true
        ls -la ~/.m2/repository/com/abc/contracts/producer/0.0.1-RELEASE/ || true
        ls -la ~/.m2/repository/com/abc/contracts/consumer/0.0.1-RELEASE/ || true

    - name: Rename stub jars
      run: |
        BASE_DIR=~/.m2/repository/com/abc/contracts/
        echo "Renaming JAR files under $BASE_DIR"
        find "$BASE_DIR" -type f -name '*-SNAPSHOT-stubs.jar' | while read jar; do
          RELEASE_JAR=$(echo "$jar" | sed 's/-SNAPSHOT-/-RELEASE-/')
          echo "Renaming $jar to $RELEASE_JAR"
          mv "$jar" "$RELEASE_JAR"
        done        
  
    - name: Verify renamed Jar
      run: |
        ls -ltra ~/.m2/repository/com/abc/contracts
        ls -ltra ~/.m2/repository/com/abc/contracts/producer
        ls -ltra ~/.m2/repository/com/abc/contracts/producer/0.0.1-RELEASE
      
    - name: Rename stub jars
      run: |
        BASE_DIR=~/.m2/repository/com/abc/contracts/
        echo "Renaming JAR files under $BASE_DIR"

        # Find and rename all JARs matching the pattern
        find "$BASE_DIR" -type f -name '*-SNAPSHOT-stubs.jar' | while read jar; do
          RELEASE_JAR=$(echo "$jar" | sed 's/-SNAPSHOT-/-RELEASE-/')
          echo "Renaming $jar to $RELEASE_JAR"
          mv "$jar" "$RELEASE_JAR"
        done
        
    - name: After rename Check the mvn repo
      run: |
        ls -ltra ~/.m2/repository/com/abc/contracts
        ls -ltra ~/.m2/repository/com/abc/contracts/producer
        ls -ltra ~/.m2/repository/com/abc/contracts/producer/0.0.1-RELEASE
    
    - name: Build consumer
      run: |
        ./gradlew :consumer:clean :consumer:build