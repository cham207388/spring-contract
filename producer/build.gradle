plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.springframework.cloud.contract' version '4.2.0'
    id 'maven-publish'
}

group = 'com.abc.contracts'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

def stubVersion = '0.0.1-RELEASE'

publishing {
    publications {
        stubs(MavenPublication) {
            artifactId = "${project.name}"
            version = "${stubVersion}"
            artifact(layout.buildDirectory.file("libs/${project.name}-${stubVersion}-stubs.jar")) {
                classifier = 'stubs'
            }
        }
    }
    repositories {
        mavenLocal()
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2024.0.0")
}

dependencies {
    def artemisVersion = '2.31.0'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-activemq'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    compileOnly 'org.projectlombok:lombok:1.18.30'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-verifier'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    implementation 'org.springframework.boot:spring-boot-starter-json'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    implementation 'io.micrometer:micrometer-tracing-bridge-otel:1.4.2'
    implementation 'io.opentelemetry:opentelemetry-exporter-zipkin:1.46.0'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.2'

    // Spring Cloud Stream Test Binder (for in-memory messaging)
    testImplementation 'org.springframework.cloud:spring-cloud-stream-test-support'
    implementation 'org.springframework.cloud:spring-cloud-stream'

}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

contracts {
    testFramework = 'JUnit5'
    packageWithBaseClasses = 'com.abc.contracts.producer'

    baseClassMappings {
        baseClassMapping('.*http.*', 'com.abc.contracts.producer.BaseHttpTest')
        baseClassMapping('.*message.*', 'com.abc.contracts.producer.BaseMessageTest')
    }
}

tasks.named('contractTest') {
    useJUnitPlatform()
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.register('renameStubArtifact') {
    def sourcePath = layout.buildDirectory.file("libs/${project.name}-${version}-stubs.jar")
    def targetPath = layout.buildDirectory.file("libs/${project.name}-${stubVersion}-stubs.jar")

    inputs.file(sourcePath)
    outputs.file(targetPath)

    doLast {
        def sourceFile = sourcePath.get().asFile
        def targetFile = targetPath.get().asFile
        def targetDir = targetFile.parentFile

        if (!targetDir.exists()) {
            targetDir.mkdirs()
        }

        if (sourceFile.renameTo(targetFile)) {
            println "Renamed artifact created: ${targetFile}"
        } else {
            throw new GradleException("Failed to rename ${sourceFile} to ${targetFile}")
        }
    }
}

publishStubsPublicationToMavenLocalRepository.dependsOn renameStubArtifact