plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.springframework.cloud.contract' version '4.2.0'
    id 'maven-publish'
}

group = 'com.abc.contracts'
version = '0.0.1-SNAPSHOT' // Keep SNAPSHOT version for build/libs artifact

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

// def gitCommitHash = 'git rev-parse --short HEAD'.execute().text.trim()
def stubVersion = '0.0.1-RELEASE'

publishing {
    publications {
        stubs(MavenPublication) {
            artifactId = "${project.name}"

            // Override version for publishing (remove SNAPSHOT)
            version = "${stubVersion}"

            // Use the renamed artifact for publishing
            artifact(layout.buildDirectory.file("libs/${project.name}-${stubVersion}-stubs.jar")) {
                classifier = 'stubs'
            }
        }
    }
    repositories {
        mavenLocal() // Publish to the local Maven repository (~/.m2/repository)
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/release' }
}

ext {
    set('springCloudVersion', "2024.0.0")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok:1.18.30'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // contract testing
    testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-verifier'

    // contract testing messages
    implementation 'org.springframework.cloud:spring-cloud-stream'
    testImplementation "org.springframework.cloud:spring-cloud-stream-test-support"
    implementation 'org.springframework.cloud:spring-cloud-starter-stream-rabbit'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    testImplementation 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2' // Replace version with the one you need
    implementation 'org.springframework.boot:spring-boot-starter-json'

    // add tracing
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    implementation 'io.micrometer:micrometer-tracing-bridge-otel:1.4.2'
    implementation 'io.opentelemetry:opentelemetry-exporter-zipkin:1.46.0'

    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    // serializer
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.2'

    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'

    implementation 'org.modelmapper:modelmapper:3.2.2'

    testImplementation 'org.testcontainers:rabbitmq:1.19.0'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

//contracts {
//    baseClassForTests = 'com.abc.contracts.producer.BaseContractTest'
//}

contracts {
    contractsDslDir = file("src/contractTest/resources/contracts") // Point to your custom folder
    packageWithBaseClasses = 'com.abc.contracts.producer'
    testMode = 'MockMvc' // For HTTP contracts
    baseClassMappings {
        baseClassMapping('com.abc.contracts.producer/.*', 'com.abc.contracts.producer.BaseContractTest') // For HTTP
        baseClassMapping('com.abc.contracts.producer/.*', 'com.abc.contracts.producer.BaseMessagingContractTest') // For RabbitMQ
    }
}

tasks.named('contractTest') {
    useJUnitPlatform()
}

tasks.named('test') {
    useJUnitPlatform()
}

// Task to rename the artifact
tasks.register('renameStubArtifact') {
    // Access the input and output files using layout.buildDirectory
    def sourcePath = layout.buildDirectory.file("libs/${project.name}-${version}-stubs.jar")
    def targetPath = layout.buildDirectory.file("libs/${project.name}-${stubVersion}-stubs.jar")

    inputs.file(sourcePath) // Original artifact
    outputs.file(targetPath) // Renamed artifact

    doLast {
        def sourceFile = sourcePath.get().asFile
        def targetFile = targetPath.get().asFile
        def targetDir = targetFile.parentFile

        // Ensure the target directory exists
        if (!targetDir.exists()) {
            targetDir.mkdirs()
        }

        // Rename the file
        if (sourceFile.renameTo(targetFile)) {
            println "Renamed artifact created: ${targetFile}"
        } else {
            throw new GradleException("Failed to rename ${sourceFile} to ${targetFile}")
        }
    }
}

// publish task depends on rename task
publishStubsPublicationToMavenLocalRepository.dependsOn renameStubArtifact